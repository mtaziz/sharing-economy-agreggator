<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Model_Ad', 'doctrine');

/**
 * Model_Entity_Ad
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property integer $parts_available
 * @property float $price
 * @property enum $from
 * @property enum $priority
 * @property enum $state
 * @property integer $show_phone
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property timestamp $deleted_at
 * @property timestamp $company_available_date
 * @property timestamp $private_available_date
 * @property integer $user_id
 * @property integer $category_id
 * @property integer $company_id
 * @property enum $ad_visibility
 * @property Model_Company $Company
 * @property Model_Category $Category
 * @property Model_User $User
 * @property Doctrine_Collection $Abuse
 * @property Doctrine_Collection $AdAddress
 * @property Doctrine_Collection $AdField
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Model_Entity_Ad extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('ad');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('parts_available', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('price', 'float', 11, array(
             'type' => 'float',
             'length' => 11,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('from', 'enum', 7, array(
             'type' => 'enum',
             'length' => 7,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'company',
              1 => 'private',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('priority', 'enum', 6, array(
             'type' => 'enum',
             'length' => 6,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'normal',
              1 => 'urgent',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('state', 'enum', 16, array(
             'type' => 'enum',
             'length' => 16,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'new',
              1 => 'available',
              2 => 'treated',
              3 => 'expired',
              4 => 'deleted_by_user',
              5 => 'deleted_by_admin',
              6 => 'disable',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('show_phone', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('updated_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('deleted_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('company_available_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('private_available_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('category_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('company_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('ad_visibility', 'enum', 7, array(
             'type' => 'enum',
             'length' => 7,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'pro',
              1 => 'private',
              2 => 'public',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Model_Company as Company', array(
             'local' => 'company_id',
             'foreign' => 'id'));

        $this->hasOne('Model_Category as Category', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasOne('Model_User as User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('Model_Abuse as Abuse', array(
             'local' => 'id',
             'foreign' => 'ad_id'));

        $this->hasMany('Model_AdAddress as AdAddress', array(
             'local' => 'id',
             'foreign' => 'ad_id'));

        $this->hasMany('Model_AdField as AdField', array(
             'local' => 'id',
             'foreign' => 'ad_id'));
    }
}